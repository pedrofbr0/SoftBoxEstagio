Cap. 4

The Sum Of A Range a

function range(start, end) {
  numbers = [];
  
  if(end - start < 0) {
    for(let i = 0; i < (start - end) + 1; i++) {
      numbers[i] = start - i;
    }
  } else {
    for(let i = 0; i < (end - start) + 1; i++) {
      numbers[i] = start + i;
    }
  }
  return numbers;
}

function sum(numbers) {
  let sum = 0;
  for(let i = 0; i < numbers.length; i++) {
    sum += numbers[i];
  }
  return sum;
}

console.log(range(1, 10));
// → [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
console.log(range(5, 2, -1));
// → [5, 4, 3, 2]
console.log(sum(range(1, 10)));
// → 55


The Sum Of A Range b

function range(start, end, step = 1) {
  numbers = [];  
  if(end < start) {
    if(step < 0) {
      step = -step;
    }
    for(let i = 0; i < (start - end) + 1; i++) {
      numbers[i] = start - i*step;
  	}
  } else {
    for(let i = 0; i < (end - start) + 1; i++) {
      numbers[i] = start + i*step;
    }
  }
  return numbers;
}

console.log(range(1, 10));
// → [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
console.log(range(5, 2, -1));
// → [5, 4, 3, 2]
console.log(sum(range(1, 10)));
// → 55



Reversing An Array

let reverseArray = function(array) {
  let newArray = [];
  for(let i = 0; i < array.length; i++) {
    newArray[i] = array[array.length - i -1];
  }
  return newArray;
};

function reverseArrayInPlace(arrayValue) {
  let aux = "";
  for(let i = 0; i < Math.floor(arrayValue.length/2); i++) {
    aux = arrayValue[i];
    arrayValue[i] = arrayValue[arrayValue.length - i - 1];
    arrayValue[arrayValue.length - i - 1] = aux;    
  }
}

console.log(reverseArray(["A", "B", "C"]));
// → ["C", "B", "A"];
let arrayValue = [1, 2, 3, 4, 5];
reverseArrayInPlace(arrayValue);
console.log(arrayValue);
// → [5, 4, 3, 2, 1]



A List

function arrayToList(array) {
  let list = null;
  for(let i = array.length - 1; i >= 0;  i--) {
    list = {value: array[i], rest: list};
  }
  return list;
}

function listToArray(list) {
  array = [];
  for (let node = list; node; node = node.rest) {
  array.push(node.value);
  }
  return array;
}

function prepend(element, list) {
  let newList = list;
  newList = {value: element, rest: list};
  return newList;
}

function nth(list, number) {
  count = 0;
  for (let node = list; node; node = node.rest) {
    if(number == count) {
      return node.value;
    } 
    count++;
  }
}

  
  
console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20



A List (recursive)

function arrayToList(array) {
  let list = null;
  for(let i = array.length - 1; i >= 0;  i--) {
    list = {value: array[i], rest: list};
  }
  return list;
}

function listToArray(list) {
  array = [];
  for (let node = list; node; node = node.rest) {
  array.push(node.value);
  }
  return array;
}

function prepend(element, list) {
  let newList = list;
  newList = {value: element, rest: list};
  return newList;
}

function nth(list, number) {
  count = 0;
  for (let node = list; node; node = node.rest) {
    if(number == count) {
      return node.value;
    } 
    count++;
  }
}

function nth(list, number) {
  if(number == 0) {
    return list.value
  } else {
    return nthR(list.rest, number - 1)
  }
}

  
  
console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20



Deep Equal

function deepEqual(a,b) {
  if(a === b) {
    return true;
  }
  
  if(a == null || typeof(a) != "object" 
     || b == null || typeof(b) != "object") {
    return false;
  }
  
  for(let key of Object.keys(a)) {
    if(!Object.keys(b).includes(key) || !deepEqual(a[key], b[key])) {
      return false;
    }
  }
  return true;
}


let obj = {here: {is: "an"}, object: 2};

console.log(deepEqual(obj, obj));
// → true
console.log(deepEqual(obj, {here: 1, object: 2}));
// → false
console.log(deepEqual(obj, {here: {is: "an"}, object: 2}));
// → true


