Cap. 18


Content Negotiation

/*fetch("https://eloquentjavascript.net/author", {headers: {accept: "text/plain"}}).then(response => {
  console.log(response.text());
});

fetch("https://eloquentjavascript.net/author", {headers: {accept: "text/html"}}).then(response => {
  console.log(response.text());
});

fetch("https://eloquentjavascript.net/author", {headers: {accept: "application/json"}}).then(response => {
  console.log(response.text());
});*/

async function seeResp() {
    let resp = await fetch("https://eloquentjavascript.net/author", {headers: {Accept: "text/plain"}});
    console.log(`${await resp.text()}\n`);
  
  	let resp1 = await fetch("https://eloquentjavascript.net/author", {headers: {Accept: "text/html"}});
    console.log(`${await resp1.text()}\n`);
  
  	let resp2 = await fetch("https://eloquentjavascript.net/author", {headers: {Accept: "application/json"}});
    console.log(`${await resp2.text()}\n`);
  
    let resp3 = await fetch("application/rainbows+unicorns", {headers: {Accept: "application/json"}});
    console.log(`${await resp3.text()}\n`);
}

seeResp();


A JavaScript Workbench

<textarea id="code">return "hi";</textarea>
<button id="button">Run</button>
<pre id="output"></pre>

<script>
  
  let button = document.querySelector("#button");
  
  button.addEventListener("click", () => {
  let code = document.querySelector("textarea").value;
  let output = document.querySelector("pre");
  try {
    let result = Function(code)();
    output.innerText = String(result);
  	} catch (e) {
    output.innerText = "Error: " + e;
  	}
  });
  
</script>


Conway's Game Of Life

<div id="grid"></div>
<button id="next">Next generation</button>

<script>
  
  
  var w = 10;
  var h = 20;
  var grid = document.querySelector("#grid");
  
  class Matrix {
  	constructor(width, height, content = (x, y) => undefined) {
    this.width = width;
    this.height = height;
    this.content = [];
	
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        this.content[y * width + x] = content(x, y);
      }
    }
  }

  get(x, y) {
    return this.content[y * this.width + x];
  }
  set(x, y, value) {
    this.content[y * this.width + x] = value;
  }
}//Fim da classe Matrix
  
  function randomMatrix() {
    let matrix = new Matrix(w, h);
    for(let i = 0; i < w; i++) {
      for(let j = 0; j < h; j++) {
      let element = Math.round(Math.random());
      matrix.set(i, j, element);
      }
    }
    
    return matrix; 
  };
  
  function printMatrix(matrix) {
    for(let i = 0; i < w; i++) {
      let string = "";
      for(let j = 0; j < h; j++) {
        string = string.concat(matrix.get(i,j) + " ");
      }
      console.log(string);
    }
  };
  
  function updateMatrix(matrix) {
    let newMatrix = new Matrix(w,h);
    for(let i = 0; i < w; i++) {
      for(let j = 0; j < h; j++) {
        newMatrix = updateCell(i, j, matrix, newMatrix);
      }
    }
    return newMatrix;
  };
  
  function updateCell(x, y, matrix, newMatrix) {
    let neigh0 = 0;
    let neigh1 = 0;
    newMatrix.set(x,y, matrix.get(x,y));
   
    for(let i = x - 1; i <= x + 1; i++) {
      for(let j = y - 1; j <= y + 1; j++) {
        if(!(i == x && j == y) && i >= 0 && i < w && j >= 0 && j < h) {
          if(matrix.get(i,j) == 0) {
            neigh0++;
          } else {
          	neigh1++;
          }
        }
      }
    }
    
    if(matrix.get(x,y) == 1 && neigh1 < 2 || neigh1 > 3) {
      newMatrix.set(x,y,0);
    } else if(matrix.get(x,y) == 1 && (neigh1 == 2 || neigh1 == 3)) {
      newMatrix.set(x,y,1);
    } else if(matrix.get(x,y) == 0 && neigh1 == 3) {
      newMatrix.set(x,y,1);
    }
    return newMatrix;
  };

  function drawCheckBoxes() {
    let boxesMatrix = new Matrix(w,h);
  	for(let i = 0; i < w; i++) {
      for(let j = 0; j < h; j++) {
        let checkBox = document.createElement("input");
        checkBox.type = "checkbox";
        boxesMatrix.set(i, j, checkBox);
        grid.appendChild(checkBox);
      }
      grid.appendChild(document.createElement("br"));
    }
    return boxesMatrix;
  };
  
  function checkBox2Matrix(matrix, boxesMatrix) {
    for(let i = 0; i < w; i++) {
      for(let j = 0; j < h; j++) {
        if(boxesMatrix.get(i, j).checked == true) {
          matrix.set(i, j, 1);
        } else {
          matrix.set(i, j, 0);
        }
      }
    }
  };
  
  function matrix2CheckBox(matrix, boxesMatrix) {
    for(let i = 0; i < w; i++) {
      for(let j = 0; j < h; j++) {
        if(matrix.get(i, j) == 0) {
          boxesMatrix.get(i, j).checked = false;
        } else {
          boxesMatrix.get(i, j).checked = true;
        }
      }
    }
  };          
          
  function nextTurn(boxesMatrix) {
    
    let matrix = new Matrix(w,h);
    checkBox2Matrix(matrix, boxesMatrix);
    matrix = updateMatrix(matrix);
    matrix2CheckBox(matrix, boxesMatrix);
  };  
  
  let boxesMatrix = drawCheckBoxes();
  matrix2CheckBox(randomMatrix(), boxesMatrix);
  
  let button = document.querySelector("button");
  button.addEventListener("click", () => nextTurn(boxesMatrix));
  
  </script>

