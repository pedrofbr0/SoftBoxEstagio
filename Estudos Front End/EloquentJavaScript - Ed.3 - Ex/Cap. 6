Cap. 6

Vector Type

class Vec {
  constructor(x,y) {
    this.x = x;
    this.y = y;
  }  
  
/* plus(vec) {
    return new Vec(this.x + vec.x, this.y + vec.y);
  }
  
  minus(vec) {
    return new Vec(this.x - vec.x, this.y - vec.y);
  }  */
  
  plus(vec) {
    this.x = this.x + vec.x;
    this.y = this.y + vec.y;
    return this;
  }
  
  minus(vec) {
    this.x = this.x - vec.x;
    this.y = this.y - vec.y;
    return this; 
  }
  
  get length() {
    return Math.sqrt(this.x*this.x+this.y*this.y);
  }

}

console.log(new Vec(1, 2).plus(new Vec(2, 3)));
// → Vec{x: 3, y: 5}
console.log(new Vec(1, 2).minus(new Vec(2, 3)));
// → Vec{x: -1, y: -1}
console.log(new Vec(3, 4).length);
// → 5


Groups

class Group {
    
  constructor() {
    this.members = [];
  }
    
  add(element) {
    if(!this.has(element)) {
       this.members.push(element);
  	}
  }
  
  delete(element) {
    this.members = this.members.filter( n => n !== element);
  }
  
  has(element) {
    if(this.members.indexOf(element) !== -1) {
      return true;
    } else
      return false;
  }

  
  /* has(element) {
    return this.members.includes(element);
  } */
  
  static from(collection) {
    let group = new Group;
    for(let i of collection) {
      group.add(i);
    }
    return group;
  }
    
}

let group = Group.from([10, 20]);
console.log(group.has(10));
// → true
console.log(group.has(30));
// → false
group.add(10);
group.delete(10);
console.log(group.has(10));
// → false


Iterable Groups

class Group {
    
  constructor() {
    this.members = [];
  }
    
  add(element) {
    if(!this.has(element)) {
       this.members.push(element);
  	}
  }
  
  delete(element) {
    this.members = this.members.filter( n => n !== element);
  }
  
  has(element) {
    if(this.members.indexOf(element) !== -1) {
      return true;
    } else
      return false;
  }

  
  /* has(element) {
    return this.members.includes(element);
  } */
  
  static from(collection) {
    let group = new Group;
    for(let i of collection) {
      group.add(i);
    }
    return group;
  }
  
     [Symbol.iterator]() {
    return new GroupIterator(this);
  }
  
}

class GroupIterator {
  
  constructor(group) {
    this.group = group;
    this.pos = 0;
  }
  
  next() {
    if (this.pos >= this.group.members.length) {
      return {done: true};
    } else {
      let value = {value: this.group.members[this.pos], done: false};
    
    this.pos++;
    
    return value;
  	}
  }
  
}

/* Group.prototype[Symbol.interator] = function() {
  return new GroupIterator(this);
}; */

for (let value of Group.from(["a", "b", "c"])) {
  console.log(value);
}
// → a
// → b
// → c


Borrowing A Method

let map = {one: true, two: true, hasOwnProperty: true};

// Fix this call
console.log(Object.prototype.hasOwnProperty.call(map,"one"));
// → true


