Cap. 5

Flattening

let arrays = [[1, 2, 3], [4, 5], [6]];

console.log(arrays.reduce((n,x) => n.concat(x)));

// → [1, 2, 3, 4, 5, 6]


Your Own Loop

function loop(value, test, update, body) {
  while(test(value)) {
    body(value);
    value = update(value);
  }
}

loop(3, n => n > 0, n => n - 1, console.log);
// → 3
// → 2
// → 1


Everything a

function every(array, test) {
  for(let element of array) {
    if(!test(element)) return false;
  }
  return true;
}

console.log(every([1, 3, 5], n => n < 10));
// → true
console.log(every([2, 4, 16], n => n < 10));
// → false
console.log(every([], n => n < 10));
// → true

Everything b

function every(array, test) {
 
  return !array.some( (element) => !test(element)); 
  
}


console.log(every([1, 3, 5], n => n < 10));
// → true
console.log(every([2, 4, 16], n => n < 10));
// → false
console.log(every([], n => n < 10));
// → true


Dominant Writing Direction

function characterScript(code) {
  for (let script of SCRIPTS) {
    if (script.ranges.some(([from, to]) => {
      return code >= from && code < to;
    })) {
      return script;
    }
  }
  return null;
}

function countBy(items, groupName) {
  let counts = [];
  for (let item of items) {
    let name = groupName(item);
    let known = counts.findIndex(c => c.name == name);
    if (known == -1) {
      counts.push({name, count: 1});
    } else {
      counts[known].count++;
    }
  }
  return counts;
}

function dominantDirection(text) {
   let scripts = countBy(text, char => {
      let script = characterScript(char.codePointAt(0));
      return script ? script.direction: "none";
    }).filter(({name}) => name != "none");


    if (scripts == 0) return "ltr";

   return scripts.reduce( (a,b) => a.count > b.count ? a : b).name;
}

console.log(dominantDirection("Hello!"));
// → ltr
console.log(dominantDirection("Hey, مساء الخير"));
// → rtl
